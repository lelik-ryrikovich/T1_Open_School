package ru.t1.client;

import io.jsonwebtoken.Jwts;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.*;
import org.springframework.stereotype.Component;
import org.springframework.web.client.RestTemplate;
import ru.t1.security.JwtUtil;
import ru.t1.starter.aop.annotation.HttpOutcomeRequestLog;
import ru.t1.dto.ClientInfoResponse;
import ru.t1.dto.ProductRegistryInfo;

import java.util.Base64;
import java.util.Date;
import java.util.Map;

/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π HTTP-–∫–ª–∏–µ–Ω—Ç –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –º–µ–∂–¥—É –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞–º–∏.
 * <p>
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ REST-–∑–∞–ø—Ä–æ—Å–æ–≤ (–≤ –æ—Å–Ω–æ–≤–Ω–æ–º GET) –∫ –¥—Ä—É–≥–∏–º —Å–µ—Ä–≤–∏—Å–∞–º
 * —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º {@link RestTemplate}.
 * <p>
 * –í—Å–µ –º–µ—Ç–æ–¥—ã –∞–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞–Ω—ã {@link HttpOutcomeRequestLog}, —á—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç
 * –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ö–æ–¥—è—â–∏–µ HTTP-–∑–∞–ø—Ä–æ—Å—ã (—á–µ—Ä–µ–∑ AOP-–∞—Å–ø–µ–∫—Ç).
 */
@Component
@RequiredArgsConstructor
@Slf4j
public class ProcessingHttpClient {
    private final RestTemplate restTemplate = new RestTemplate();

    private final JwtUtil jwtUtil;

    // –°–æ–∑–¥–∞–µ–º HTTP –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å JWT —Ç–æ–∫–µ–Ω–æ–º
    private HttpHeaders createHeadersWithJwt() {
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º JWT —Ç–æ–∫–µ–Ω –¥–ª—è –º–µ–∂—Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
        String jwtToken = jwtUtil.generateServiceToken();
        headers.set("Authorization", "Bearer " + jwtToken);

        // –õ–æ–≥–∏—Ä—É–µ–º JWT —Ç–æ–∫–µ–Ω
        logJwtToken(jwtToken);

        return headers;
    }

    /**
     * –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ JWT —Ç–æ–∫–µ–Ω–∞
     */
    private void logJwtToken(String jwtToken) {
        try {
            // –î–µ–∫–æ–¥–∏—Ä—É–µ–º JWT –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ payload
            String[] parts = jwtToken.split("\\.");
            if (parts.length >= 2) {
                String payload = new String(Base64.getUrlDecoder().decode(parts[1]));
                log.info("üîê Generated JWT Token for service: {}", jwtUtil.extractServiceName(jwtToken));
                log.info("üìã JWT Payload: {}", payload);
                log.info("üîë JWT Full Token: Bearer {}", jwtToken);

                // –õ–æ–≥–∏—Ä—É–µ–º expiration time
                Date expiration = Jwts.parserBuilder()
                        .setSigningKey(jwtUtil.getSigningKey())
                        .build()
                        .parseClaimsJws(jwtToken)
                        .getBody()
                        .getExpiration();
                log.info("‚è∞ JWT Expires at: {}", expiration);
            }
        } catch (Exception e) {
            log.info("‚ö†Ô∏è Failed to decode JWT for logging: {}", e.getMessage());
        }
    }

    @HttpOutcomeRequestLog
    public Long sendGetAccountIdRequest(String url, Map<String, Object> params) {
        HttpEntity<String> entity = new HttpEntity<>(createHeadersWithJwt());

        ResponseEntity<Long> response = restTemplate.exchange(
                url, HttpMethod.GET, entity, Long.class, params
        );
        return response.getBody();
    }

    @HttpOutcomeRequestLog
    public ClientInfoResponse sendGetClientInfoRequest(String url, Map<String, Object> params) {
        HttpEntity<String> entity = new HttpEntity<>(createHeadersWithJwt());

        ResponseEntity<ClientInfoResponse> response = restTemplate.exchange(
                url, HttpMethod.GET, entity, ClientInfoResponse.class, params
        );
        return response.getBody();
    }

    @HttpOutcomeRequestLog
    public ProductRegistryInfo sendGetProductRegistryByAccountRequest(String url, Map<String, Object> params) {
        HttpEntity<String> entity = new HttpEntity<>(createHeadersWithJwt());

        ResponseEntity<ProductRegistryInfo> response = restTemplate.exchange(
                url, HttpMethod.GET, entity, ProductRegistryInfo.class, params
        );
        return response.getBody();
    }
}
