package ru.t1.security;

import io.jsonwebtoken.Claims;
import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.util.StringUtils;
import org.springframework.web.filter.OncePerRequestFilter;
import org.springframework.security.core.context.SecurityContextHolder;

import java.io.IOException;
import java.util.Collections;
import java.util.Date;

/**
 * –§–∏–ª—å—Ç—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ JWT —Ç–æ–∫–µ–Ω–æ–≤ –≤–æ –≤—Ö–æ–¥—è—â–∏—Ö HTTP –∑–∞–ø—Ä–æ—Å–∞—Ö.
 * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –≤ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞—Ö, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç –∑–∞–ø—Ä–æ—Å—ã –æ—Ç –¥—Ä—É–≥–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤.
 * */
@Slf4j
@RequiredArgsConstructor
public class JwtAuthFilter extends OncePerRequestFilter {

    private final JwtUtil jwtUtil;

    @Override
    protected void doFilterInternal(HttpServletRequest request,
                                    HttpServletResponse response,
                                    FilterChain filterChain) throws ServletException, IOException {
        String jwt = parseJwt(request);

        if (jwt != null && jwtUtil.validateToken(jwt)) {
            logIncomingJwt(jwt, request);
            String serviceName = jwtUtil.extractServiceName(jwt);
            String tokenType = jwtUtil.extractTokenType(jwt);

            if ("SERVICE".equals(tokenType)) {
                log.info("‚úÖ JWT token validated. Service: {}", serviceName);

                UsernamePasswordAuthenticationToken auth = new UsernamePasswordAuthenticationToken(
                        serviceName,
                        null,
                        Collections.singletonList(new SimpleGrantedAuthority("ROLE_SERVICE"))
                );
                SecurityContextHolder.getContext().setAuthentication(auth);

            } else {
                log.info("‚ùå Invalid token type: {}", tokenType);
                // –ù–ï –±–ª–æ–∫–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
            }
        } else if (jwt != null) {
            log.info("‚ùå Invalid JWT token");
            // –ù–ï –±–ª–æ–∫–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
        } else {
            log.info("üîì No JWT token - allowing request as anonymous");
            // –ù–ï –±–ª–æ–∫–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å - —Ä–∞–∑—Ä–µ—à–∞–µ–º –∫–∞–∫ –∞–Ω–æ–Ω–∏–º–Ω—ã–π
        }

        filterChain.doFilter(request, response);
    }

    private String parseJwt(HttpServletRequest request) {
        String headerAuth = request.getHeader("Authorization");
        return (StringUtils.hasText(headerAuth) && headerAuth.startsWith("Bearer "))
                ? headerAuth.substring(7)
                : null;
    }

    /**
     * –õ–æ–≥–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ö–æ–¥—è—â–µ–º JWT —Ç–æ–∫–µ–Ω–µ
     */
    private void logIncomingJwt(String jwtToken, HttpServletRequest request) {
        try {
            Claims claims = jwtUtil.decodeToken(jwtToken);
            String serviceName = claims.getSubject();
            String tokenType = claims.get("type", String.class);
            Date expiration = claims.getExpiration();
            long remainingMs = expiration.getTime() - System.currentTimeMillis();

            log.info("üì® Incoming JWT from: {}, Service: {}, Type: {}",
                    request.getRemoteAddr(), serviceName, tokenType);
            log.debug("‚è∞ JWT Expires: {} (in {} minutes)",
                    expiration, remainingMs / 60000);
            log.debug("üìã JWT Claims: {}", claims);

        } catch (Exception e) {
            log.warn("‚ö†Ô∏è Failed to decode incoming JWT: {}", e.getMessage());
        }
    }
}
